import java.util.ArrayList;
import java.util.List;


public class State {
	public State north;
	public State south;
	public State east;
	public State west;
	
	public String label;
	
	public State(String Label, State North, State South, State East, State West) {
		label = Label;
		north = North;
		south = South;
		east = East;
		west = West;
	}
	
	public List<State> connectedStates() {
		List<State> connectedStates = new ArrayList<State>();
		if(north != null)
			connectedStates.add(north);
		if(south != null)
			connectedStates.add(south);
		if(east != null)
			connectedStates.add(east);
		if(west != null)
			connectedStates.add(west);
		return connectedStates;
	}
	
	public String connectedTo(State other) {
		if(north == other) return "n";
		if(south == other) return "s";
		if(east == other) return "e";
		if(west == other) return "w";
		return null; 
	}
	
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("\t");
		if(north != null) {
			sb.append(north.label);
		}
		sb.append("\n");
		if(west != null) {
			sb.append(west.label);
		}
		sb.append("\t");
		sb.append(this.label);
		sb.append("\t");
		if(east!=null) {
			sb.append(east.label);
		}
		sb.append("\n\t");
		sb
		return sb.toString();
	}
	
	public void connect(State other, String direction) throws Exception {
		direction = direction.toLowerCase();
		if(other==null) {
			connectToNull(direction);
			return;
		}
		System.out.println(direction);
		if(direction.equals("n")) {
				north = other;
				other.south = this;
		}
		else if(direction.equals("s")) {
				south = other;
				other.north = this;
		}
		else if(direction.equals("e")) {
			east = other;
			other.west = this;
		}
		else if(direction.equals("w")) {
				west = other;
				other.east = this;
		}
		else {
			throw new Exception("Invalid direction.");
		}
	}
	
	public void connectToNull(String direction) throws Exception {
		if(direction.equals("n"))
			north = null;
		else if(direction.equals("s"))
			south = null;
		else if(direction.equals("e"))
			east = null;
		else if(direction.equals("w"))
			west = null;
		else
			throw new Exception("Invalid direction.");
	}
}
