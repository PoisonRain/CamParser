import java.util.ArrayList;
import java.util.List;
import java.util.Queue;


public class StateMachine {
	public List<State> nodes;
	
	public StateMachine() {
		nodes = new ArrayList<State>();
		State ANode = new State("A", null, null, null, null);
		State BNode = new State("B", null, null, null, null);
		State CNode = new State("C", null, null, null, null);
		State DNode = new State("D", null, null, null, null);
		// A B
		// C D
		
		try {
			ANode.connect(BNode, "e");
			BNode.connect(DNode, "S");
			CNode.connect(DNode, "e");
			ANode.connect(CNode, "s");
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		nodes.add(ANode);
		nodes.add(BNode);
		nodes.add(CNode);
		nodes.add(DNode);
		
		for(State s : nodes) {
			System.out.println(s);
		}
	}
	
	private List<Path> pathQueue;
	public Path findPath(State startNode, State endNode) {
		pathQueue = new ArrayList<Path>();
		startNode.distance = 0;
		Path p = new Path(startNode);
		if(startNode.connectedTo(endNode) != null) {
			p.states.add(endNode);
			return p;
		}
		pathQueue.add(p);
		while(pathQueue.size() > 0) {
			Path wPath = pathQueue.remove(0);
			State lastState = wPath.states.get(wPath.states.size()-1);
			for(State s : lastState.connectedStates()) {
				if(s == endNode) {
					wPath.add(endNode);
					return wPath;
				}
				Path newPath = new Path(wPath.states, s);
				boolean isbest = true;
				for(Path qPath : pathQueue) {
					if(qPath.last() == newPath.last() && qPath.length() < newPath.length()) {
						isbest = false;
					}
				}
				if(isbest)
					pathQueue.add(newPath);
			}
		}
		return null;
	}
}
